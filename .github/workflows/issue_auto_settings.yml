# Issue作成時に、本文の「マージ先: #」に続けてマージ先ブランチに対応するIssue番号を書くことで、以下処理を行う。
# - 関連するIssueと同じラベル、マイルストーンを追加

name: Issue作成時 ラベル、マイルストーンを追加

on:
  issues:
    types: [ opened, edited ]

jobs:
  set-milestone:
    runs-on: ubuntu-latest

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3

      - name: ラベルとマイルストーンを設定
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            if (!issue) {
              throw new Error("Issue payload is not available.");
            }
            const body = issue.body;
            if (!body) {
              throw new Error("Issue body is empty.");
            }
            
            // 正規表現を使って本文からissueリンクを抽出
            const issueLinks = [...body.matchAll(/マージ先: #(\d+)/g)];
            if (issueLinks.length === 0) {
              console.log("No linked issues found in the body.");
              return;
            }
            
            const labelsToAdd = new Set();
            let milestoneToSet = null;
            
            // 各リンクされたissueのラベルとマイルストーンを取得
            for (const link of issueLinks) {
              const linkedIssueNumber = link[1];
              try {
                const { data: linkedIssue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: linkedIssueNumber,
                });
            
                // "parent issues"以外のラベルをセットに追加
                linkedIssue.labels.forEach(label => {
                  if (label.name !== "parent issues") {
                    labelsToAdd.add(label.name);
                  }
                });
            
                // 最初に見つかったmilestoneを設定
                if (linkedIssue.milestone) {
                  milestoneToSet = linkedIssue.milestone.number;
                  console.log(`Found milestone: ${linkedIssue.milestone.title}`);
                  break;  // 最初に見つかったmilestoneで設定
                }
              } catch (error) {
                console.error(`Failed to fetch linked issue #${linkedIssueNumber}:`, error);
              }
            }
            
            // 現在のissueにラベルを追加
            if (labelsToAdd.size > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: Array.from(labelsToAdd),
              });
              console.log(`Labels added to issue #${issue.number}.`);
            } else {
              console.log("No labels to add.");
            }
            
            // 現在のissueにmilestoneを設定
            if (milestoneToSet) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                milestone: milestoneToSet,
              });
              console.log(`Milestone set to issue #${issue.number}.`);
            } else {
              console.log("No milestone found to set.");
            }