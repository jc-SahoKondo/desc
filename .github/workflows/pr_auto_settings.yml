name: PR作成時 ラベル、マイルストーン、担当者追加

on:
  pull_request:
    types: [ opened, edited ]

jobs:
  set-pr:
    runs-on: ubuntu-latest

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3

      - name: ラベル、マイルストーン、担当者を設定
        uses: actions/github-script@v7
        with:
          script: |
            // PRとそのデータの取得
            const pr = context.payload.pull_request;
            if (!pr) throw new Error("Issue payload is not available.");

            const { body: prBody, number: prNumber, base: { ref: prBase }, user: { login: creator } } = pr;
            if (!prBody) {
                console.log("PR body is empty.");
                return;
            }

            // PRの本文からIssue番号を抽出
            const issueNumber = extractIssueNumber(prBody, /Issue: #(\d+)/);
            if (!issueNumber) return console.log("No issue found in PR body.");

            // Issueのデータを取得し、PRにラベル、マイルストーン、担当者を設定
            try {
                const issueData = await getIssueData(issueNumber);
                const issueAssignees = (issueData.data.assignees?.length === 0 || true)
                                        ? issueData.data.assignees.map(assignee => assignee.login)
                                        : [creator];
                console.log("assignees: ", issueData.data.assignees);
                console.log("issueAssignees: ", issueAssignees);
                const labelsToSet = filterLabels(issueData.data.labels, ["parent issue", "dev", "stg", "fixed"]);
                const milestoneToSet = issueData.data.milestone?.number || null;
                const isParentIssue = issueData.data.labels.some(label => label.name === "parent issue");
                const isHotFix = issueData.data.labels.some(label => label.name === "hotfix");

                if (labelsToSet.length > 0) {
                    await updatePullRequestMilestoneAssignee(prNumber, milestoneToSet, issueAssignees);
                    await addIssueLabels(prNumber, labelsToSet);
                    if (!isParentIssue) {
                        await updateIssueAssignee(issueNumber, issueAssignees);

                        if (!isHotFix) {
                            await addIssueLabels(issueNumber, ["ready for review"]);
                        }
                    }
                }
            } catch (error) {
                console.error("Failed to update issue and PR:", error);
            }

            // 特定の正規表現からIssue番号を抽出する関数
            function extractIssueNumber(body, regex) {
                const match = body.match(regex);
                return match ? match[1] : null;
            }

            // Issueデータを取得する関数
            async function getIssueData(issueNumber) {
                try {
                    return await github.rest.issues.get({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: issueNumber,
                    });
                } catch (error) {
                    throw new Error(`Failed to fetch issue #${issueNumber}: ${error}`);
                }
            }

            // 特定のラベルを除外して残りを配列で返す関数
            function filterLabels(labels, excludeLabels) {
                return labels
                    .filter(label => !excludeLabels.includes(label.name))
                    .map(label => label.name);
            }

            // PRにマイルストーンと担当者を設定する関数
            async function updatePullRequestMilestoneAssignee(prNumber, milestone, assignees) {
                console.log(`Updating PR #${prNumber} milestone and assignee`);
                await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    milestone: milestone,
                    assignees: assignees,
                });
            }

            // Issueの担当者を更新する関数
            async function updateIssueAssignee(issueNumber, assignees) {
                console.log(`Updating assignee for issue #${issueNumber}`);
                await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    assignees: assignees,
                });
            }

            // Issueにラベルを追加する関数
            async function addIssueLabels(issueNumber, labels) {
                console.log(`Adding labels to issue #${issueNumber}`);
                await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    labels,
                });
            }